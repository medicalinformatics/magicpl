<?xml version="1.0" encoding="UTF-8"?>
<schema xmlns="http://www.w3.org/2001/XMLSchema"
	targetNamespace="http://www.example.org/Pfade"
	xmlns:tns="http://www.example.org/Pfade" elementFormDefault="qualified">

	<element name="pathconfig">
		<complexType>
			<sequence>
				<element ref="tns:paths" />
				<element ref="tns:iodefinitions" />
				<element ref="tns:authentication" />
			</sequence>
		</complexType>
	</element>

	<element name="iodefinitions">
		<annotation>
			<documentation>
				Optional. Allows to defines iosingles and iorecords
				for use in the following schema.
			</documentation>
		</annotation>
		<complexType>
			<sequence maxOccurs="unbounded">
				<choice>
					<group ref="tns:ioDefChoice" />
				</choice>
			</sequence>
		</complexType>
	</element>

	<element name="authentication">
		<complexType>
			<!-- It would be desirable to enforce, that at least one of <client> and 
				<anonymous> is present. This can be done by using <choice> and <sequence> 
				(compare https://stackoverflow.com/questions/100228/xml-schema-construct-for-any-one-or-more-of-these-elements-but-must-be-at-least), 
				but would lead to problems in the generated JAXB classes (compare https://stackoverflow.com/questions/2716916/xml-schema-to-java-classes-with-xjc). -->
			<sequence>
				<element name="client" type="tns:client" minOccurs="0"
					maxOccurs="unbounded"></element>
				<element name="anonymous" type="tns:anonymousClient"
					minOccurs="0"></element>
			</sequence>
		</complexType>
	</element>

	<complexType name="ioabstracttype" abstract="true">
		<annotation>
			<documentation>
				Base type for IO definitions (iosingle / iorecord).
			</documentation>
		</annotation>
		<attribute name="name" type="string" use="required" />
	</complexType>

	<complexType name="iorecord">
		<annotation>
			<documentation>
				A convenient record of several iosingles.
				Implementations
				will expand an iorecord to its contained iosingles.
			</documentation>
		</annotation>
		<complexContent>
			<extension base="tns:ioabstracttype">
				<sequence>
					<element name="iosingle" type="tns:iosingle"
						maxOccurs="unbounded" /> <!-- TODO: Soll ein bestehendes iosingle referenzieren! -->
				</sequence>
			</extension>
		</complexContent>
	</complexType>

	<complexType name="iosingle">
		<annotation>
			<documentation>
				A single input/output data type with a key and a value
				(usually both a string).
			</documentation>
		</annotation>
		<complexContent>
			<extension base="tns:ioabstracttype">
				<attribute name="type" type="string" default="String" />
			</extension>
		</complexContent>
	</complexType>

	<element name="paths">
		<annotation>
			<documentation>
				Lists all available paths. Each can either be a simple
				path ("path") or a chain of simple paths ("multipath").
			</documentation>
		</annotation>
		<complexType>
			<sequence>
				<choice maxOccurs="unbounded">
					<group ref="tns:pathChoice"></group>
				</choice>
			</sequence>
		</complexType>
		<unique name="uniquePath">
			<!-- Only //tns:path/tns:name is not sufficient, <path> elements nested 
				in other <path> elements via <switch> would not be checked for uniqueness. -->
			<selector
				xpath=".//tns:path/tns:name | 
			.//tns:multipath/tns:name | 
			.//tns:switch/tns:case/tns:path/tns:name |
			.//tns:switch/tns:default/tns:path/tns:name |
			.//tns:step/tns:name" />
			<field xpath="."></field>
		</unique>
	</element>

	<complexType name="ioabstractref" abstract="true">
		<attribute name="name" type="string" />
		<attribute name="ref" type="string" />
	</complexType>

	<complexType name="iorecordref">
		<complexContent>
			<extension base="tns:ioabstractref"></extension>
		</complexContent>
	</complexType>

	<complexType name="iosingleref">
		<complexContent>
			<extension base="tns:ioabstractref"></extension>
		</complexContent>
	</complexType>

	<complexType name="path">
		<annotation>
			<documentation>Base type for paths</documentation>
		</annotation>
		<sequence>
			<element name="name" type="string"></element>
			<element name="parameters" minOccurs="0"
				type="tns:parameters" />
			<element name="input">
				<complexType>
					<sequence maxOccurs="unbounded">
						<choice>
							<group ref="tns:ioRefChoice" />
						</choice>
					</sequence>
				</complexType>
			</element>
			<element name="output">
				<complexType>
					<sequence maxOccurs="unbounded">
						<choice>
							<group ref="tns:ioRefChoice" />
						</choice>
					</sequence>
				</complexType>
			</element>
		</sequence>
	</complexType>

	<complexType name="simplePath">
		<annotation>
			<documentation>
				Type definition for simple paths, i.e. those that are
				directly implemented by a Java class.
			</documentation>
		</annotation>
		<complexContent>
			<extension base="tns:path">
				<sequence>
					<choice>
						<element name="implementation" type="string"></element>
						<element name="switch" type="tns:switch"></element>
					</choice>
				</sequence>
			</extension>
		</complexContent>
	</complexType>

	<complexType name="multiPath">
		<annotation>
			<documentation>Multipaths, i.e. chains of simple path invocations
				called "steps"
			</documentation>
		</annotation>
		<complexContent>
			<extension base="tns:path">
				<sequence>
					<element name="step" type="tns:simplePath"
						maxOccurs="unbounded"></element>
				</sequence>
			</extension>
		</complexContent>
	</complexType>

	<complexType name="switch">
		<sequence>
			<element name="evaluator">
				<complexType>
					<sequence>
						<element name="parameters" type="tns:parameters"
							minOccurs="0" />
					</sequence>
					<attribute name="name" type="string" use="required" />
				</complexType>
			</element>
			<element name="case" maxOccurs="unbounded"
				type="tns:guardedCaseType">
			</element>
			<element name="default" minOccurs="0" maxOccurs="1"
				type="tns:defaultCaseType" />
		</sequence>

	</complexType>

	<complexType name="defaultCaseType">
		<choice>
			<group ref="tns:pathChoice"></group>
		</choice>
	</complexType>

	<complexType name="guardedCaseType">
		<complexContent>
			<extension base="tns:defaultCaseType">
				<attribute name="value" type="string" use="required" />
			</extension>
		</complexContent>
	</complexType>

	<complexType name="parameters">
		<sequence>
			<element name="parameter" minOccurs="0" maxOccurs="unbounded">
				<complexType>
					<simpleContent>
						<extension base="string">
							<attribute name="name" type="token"></attribute>
						</extension>
					</simpleContent>
				</complexType>
			</element>
		</sequence>
	</complexType>

	<group name="pathChoice">
		<choice>
			<element name="path" type="tns:simplePath" />
			<element name="multipath" type="tns:multiPath" />
		</choice>
	</group>

	<group name="ioDefChoice">
		<choice>
			<element name="iosingle" type="tns:iosingle" />
			<element name="iorecord" type="tns:iorecord" />
		</choice>
	</group>

	<group name="ioRefChoice">
		<choice>
			<element name="iosingle" type="tns:iosingleref" /> <!-- TODO: Hier soll tatsächlich referenziert werden! -->
			<element name="iorecord" type="tns:iorecordref" /> <!-- TODO: Hier soll tatsächlich referenziert werden! -->
		</choice>
	</group>

	<!-- Element to configure anonymous access. Defines permissions but obviously 
		no api key. -->
	<complexType name="anonymousClient">
		<sequence>
			<choice>
				<element name="allPermissions">
					<complexType></complexType>
				</element>
				<element name="permissions">
					<simpleType>
						<list itemType="string"></list>
					</simpleType>
				</element>
			</choice>
			<element name="restrictions" type="tns:restrictions"
				minOccurs="0" maxOccurs="unbounded" />
		</sequence>
	</complexType>

	<!-- Definition of an authenticated client. Based on <anonymous> with the 
		addition of the api key (or, in the future, a choice of different authentication 
		methods). -->
	<complexType name="client">
		<complexContent>
			<extension base="tns:anonymousClient">
				<sequence>
					<element name="apiKey" type="token" />
				</sequence>
			</extension>
		</complexContent>
	</complexType>

	<!-- Restrictions on paths, e.g. which values are allowed for a specific 
		combination of client, path and input field. -->
	<complexType name="restrictions">
		<sequence>
			<element name="restriction">
				<complexType>
					<sequence>
						<element name="inputRestriction" minOccurs="0"
							maxOccurs="unbounded">
							<complexType>
								<choice>
									<element name="permissibleValues">
										<complexType>
											<sequence>
												<element name="value" type="string"
													maxOccurs="unbounded" />
											</sequence>
										</complexType>
									</element>
									<element name="regex" type="string" />
								</choice>
								<attribute name="input" type="token" use="required" />
							</complexType>
						</element>
					</sequence>
					<attribute name="path" type="token" use="required" />
				</complexType>
			</element>
		</sequence>
	</complexType>
</schema>